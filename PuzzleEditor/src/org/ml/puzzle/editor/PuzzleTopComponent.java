package org.ml.puzzle.editor;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.ml.model.PuzzlePiece;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.CloneableTopComponent;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
//@ConvertAsProperties(
//        dtd = "-//org.ml.puzzle.editor//Puzzle//EN",
//        autostore = false
//)
//@TopComponent.Description(
//        preferredID = "PuzzleTopComponent",
//        //iconBase="SET/PATH/TO/ICON/HERE", 
//        persistenceType = TopComponent.PERSISTENCE_ALWAYS
//)
//@TopComponent.Registration(mode = "editor", openAtStartup = false)
//@ActionID(category = "Window", id = "org.ml.puzzle.editor.PuzzleTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
//@TopComponent.OpenActionRegistration(
//        displayName = "#CTL_PuzzleAction",
//        preferredID = "PuzzleTopComponent"
//)
@Messages({
    "CTL_PuzzleAction=Puzzle",
    "CTL_PuzzleTopComponent=Puzzle Window",
    "HINT_PuzzleTopComponent=This is a Puzzle window"
})
public final class PuzzleTopComponent extends CloneableTopComponent {

    public PuzzleTopComponent(File file) {
        initComponents();
        setName(Bundle.CTL_PuzzleTopComponent());
        setToolTipText(Bundle.HINT_PuzzleTopComponent());

        InstanceContent sceneInstanceContent = new InstanceContent();

        PuzzleObjectScene ps = null;
        try {
            BufferedImage bufferedImage = ImageIO.read(file);
            ImageIcon icon = new ImageIcon(bufferedImage);
            ps = new PuzzleObjectScene(this, sceneInstanceContent, icon, file);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        jScrollPane1.setViewportView(ps.createView());

        associateLookup(new ProxyLookup(
                Lookups.singleton(new InstanceContent()),
                new AbstractLookup(sceneInstanceContent)
        )
        );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    Lookup.Result<PuzzlePiece> allPuzzlePieces;

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
//
//    @Override
//    public void resultChanged(LookupEvent le) {
//        StatusDisplayer.getDefault().setStatusText("Change...");
//    }

}
